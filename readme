# Visited Countries üåç

Visited Countries is a full-stack web application that allows users to register, log in, and mark countries they've visited on an interactive SVG world map.
It's designed to be both useful and visually engaging, giving users a fun way to track their travel history and visualize their adventures around the world.

## Video üé•

overview video:

[Watch Youtube video](https://youtu.be/M8i-dAxydWM)

 ## File Overview üìÅ

Below is an overview of key files and their roles within the application:

### registerScript.js 
	- Handles form validation on the registration and login pages.
	- If an input field is empty, it highlights the border in red and shows a warning message for 1.5 seconds.
	- Provides the functionality to toggle password visibility using an eye icon, improving user experience on password input fields.


### earth.jpg 
	- Background image for login/register pages.
### main.css 
	- Contains the styles for the login, registration, and main application page.
### index.ejs 
	- The main interactive page users see after logging in.
	- Displays the SVG world map where users can click on countries to mark them as visited.
	- Includes:
		- list of visited countries.
		- Input fields to manually add/remove a country.
		- Buttons for logging in, registering, updating user details, and deleting an account.
	- Countries with only one region use an id, while countries with multiple regions use a class. The embedded script handles targeting these using JavaScript.
	- Features include:
		- Changing a country‚Äôs color based on the user‚Äôs selected theme
		- Updating the magnifying glass button with a Google Maps link to a selected country
		- Toggling visibility for delete/update forms
	
### login.ejs
	- he login page for existing users.
	- Consists of two input fields: username and password.
	- Includes a script for client-side input validation.
	- Also includes a link for new users to register and an eye icon to show/hide passwords.

### register.ejs
	- The registration page for new users.
	- Consists of four input fields: username, password, confirm password, color picker (for marking visited countries).
	- Includes a script for client-side input validation.
	- Also includes a link for new users to register and an eye icon to show/hide passwords.

### countryCode.js
	- Contains key-value pairs of country codes and names.
	- Distinguishes between single-region (id) and multi-region (class) countries.
	- Used by the index.js script to reference map elements and synchronize selections with user data.

### index.js
	- The backend entry point for the server (runs on localhost:3000).
	- Built using Express.js and integrates with:
		- PostgreSQL for data storage
		- bcrypt for secure password hashing and compare
		- Passport.js for user authentication (local strategy)
	- Key features:
		- Session management for logged-in users
		- Registration/login/logout routes
		- Storing and retrieving visited countries from the database
		- Updating and deleting user data
	- The database structure and backend logic were inspired by Angela Yu‚Äôs Udemy course, which provided a clear foundation for learning authentication and database integration.

### .env
	- Stores sensitive configuration:
		- PostgreSQL database credentials
		- Session secret for cookies

### .gitignore
	- Prevents sensitive or unnecessary files (like .env and node_modules) from being pushed to GitHub.
	- Ensures cleaner version control and security.

## Technologies Used üîß

This project leverages a modern full-stack development approach, including:

- Node.js ‚Äì Runtime environment for backend development
- Express.js ‚Äì Minimalist web framework for handling routes and middleware
- EJS templating ‚Äì Server-side templating engine used to render dynamic content
- PostgreSQL ‚Äì Relational database used to store users and their visited countries
- pg / pgAdmin ‚Äì PostgreSQL client library and GUI tool for database management
- CSS - Used on the frontend for interaction, validation, and design
- bcrypt ‚Äì Library for hashing passwords securely
- Passport.js ‚Äì Authentication middleware that simplifies login and session handling

## Features üöÄ

- Register and log in with secure password rules (min. 8 chars, uppercase, lowercase, number)
- Show/hide password on input
- Choose your color for visited countries
- Enter the country name in the input and add it
- Click on countries to add/remove them to your visited list
- View visited countries in a list
- Search country and open in Google
- Edit your name, password, or color
- Delete your account

## Map Source üåç

SVG World map from https://simplemaps.com/resources/svg-world

## Setup Instructions üõ†Ô∏è

1. Clone the repository:
   ```bash
   git clone https://github.com/DRAGQ/Visited-countries-js
   cd visitred-countries

2. Install dependencies

   npm install

3. Set up your PostgreSQL database:

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(100) NOT NULL,
    color VARCHAR(100) NOT NULL
);

CREATE TABLE countries (
    id SERIAL PRIMARY KEY,
    country_id VARCHAR(10),
    country_class VARCHAR(100),
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE
);

4. Create a `.env` file and add the following:

   DB_USER=postgres  
   DB_HOST=localhost  
   DB_DATABASE=WorldMap  
   DB_PASSWORD=qweqwe  
   DB_PORT=5432

5. Start the app:

   node index.js

6. Open the app in your browser:
   http://localhost:3000 in your browser.
